Функция СведенияОВнешнейОбработке() Экспорт
  ПараметрыРегистрации = Новый Структура;
  ПараметрыРегистрации.Вставить("Вид", ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
  ПараметрыРегистрации.Вставить("Наименование", "Выгрузка ЖР в Elasticsearch"); //Наименование обработки, которым будет заполнено наименование элемента справочника
  ПараметрыРегистрации.Вставить("Версия", "1.0");
  ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
  ПараметрыРегистрации.Вставить("Информация", "Обработка выгружает записи ЖР в систему поиска Elasticsearch"); //Краткая информация по обработке, описание обработки
  ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.4");
  ТаблицаКоманд = ПолучитьТаблицуКоманд();
  ДобавитьКоманду(ТаблицаКоманд,
          "Выгрузить ЖР", //представление команды в пользовательском интерфейсе
          "ВыгрузкаЖРвElasticsearch", //идентификатор команды; любая строка, уникальная в пределах данной обработки
          ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода());
  
  ДобавитьКоманду(ТаблицаКоманд,
  		"Настройка выгрузки ЖР в Elastic",
  		"ОткрытьФормуВыгрузкиЖРвElastic",
  		ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы());
  ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
  Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()
  Команды = Новый ТаблицаЗначений;
  Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
  Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
  Возврат Команды;
КонецФункции  

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды) Экспорт
  // Реализация логики команды
  Если ИдентификаторКоманды = "ВыгрузкаЖРвElasticsearch" Тогда
	  ОтправитьЖРвLogstash();	  
  КонецЕсли;
  
КонецПроцедуры

//Функции обработки и выгрузки данных

#Область РаботаСПериодомВыгрузкиЖР

Функция КлючХранилищаДатыНижнейГраницыВыгрузкиЖР()
	Возврат "elasticLogstashLastDateOfLogData";
КонецФункции


Функция ПолучитьДатуНижнейГраницыВыгрузкиЖР() Экспорт
	ключ = КлючХранилищаДатыНижнейГраницыВыгрузкиЖР();
	датаГраницыВыгрузки = ХранилищеОбщихНастроек.Загрузить(
			ключ, 
			ключ,
			Неопределено,
			""
	);
		
	Если НЕ ЗначениеЗаполнено(датаГраницыВыгрузки) Тогда
		//т.к. конечная дата выгрузки ЖР смещается на час относительно
		//нижней границы выгрузки, то первую нижнюю границу устанавливаем
		//вниз на три месяца от текущей даты
		датаГраницыВыгрузки = ДобавитьМесяц(ТекущаяДата(),-3);
	КонецЕсли;
	
	Возврат датаГраницыВыгрузки;
КонецФункции	


Процедура СохранитьДатуНижнейГраницыВыгрузкиЖР(датаГраницыВыгрузки) Экспорт
	ключ = КлючХранилищаДатыНижнейГраницыВыгрузкиЖР();
	ХранилищеОбщихНастроек.Сохранить(
			ключ,
			ключ,
			датаГраницыВыгрузки,
			Неопределено,
			""
	);
КонецПроцедуры
	
	
Функция ИнициироватьПериодВыгрузки(знач период = 3600)
	//инициируем период выгрузки
	датаНачала = ПолучитьДатуНижнейГраницыВыгрузкиЖР();
	датаОкончания = ТекущаяДата();
	//если выгружаемый период больше часа
	//смещаем дату максимальной границы выгрузки на час
	//это ограничит максимальный объем выгружаемых за один раз данных
	Если период <=0 Тогда
		период = 3600;
	КонецЕсли;
	датаОкончания = ?(датаОкончания<(датаНачала+3600), датаОкончания, датаНачала+период);
	
	Возврат Новый Структура("ДатаНачала, ДатаОкончания", датаНачала, датаОкончания);
КонецФункции
#КонецОбласти

#Область РаботаСНастройками

Функция КлючХранилищаНастроекДоступаКElastic()
	Возврат "201905050011elasticLogstashSettings";
КонецФункции


Функция ПолучитьНастройкиДоступаКElastic() Экспорт
	ключ = КлючХранилищаНастроекДоступаКElastic();
	значение = ХранилищеОбщихНастроек.Загрузить(
			ключ,
			ключ,
			Неопределено,
			""
	);
		
	настройки = СтруктураНастроекДоступаКElastic();
	Если ЗначениеЗаполнено(значение) Тогда
		ЗаполнитьЗначенияСвойств(настройки, значение);
	КонецЕсли;
		
	Возврат настройки;
КонецФункции	


Процедура СохранитьНастройкиДоступаКElastic(настройки) Экспорт
	ключ = КлючХранилищаНастроекДоступаКElastic();
	ХранилищеОбщихНастроек.Сохранить(
			ключ,
			ключ,
			настройки,
			Неопределено,
			""
	);		
КонецПроцедуры


Функция СтруктураНастроекДоступаКElastic() Экспорт
	Возврат Новый Структура("АдресСервера, ПортСервера, Сервис, Дебаг, Таймаут, Период, ПортЗапросов", "", 0, "", Ложь, 20, 3600, 9200);
КонецФункции

#КонецОбласти

#область РаботаСHTTP

//отправка пост запроса и анализ ответа

Функция ОтправитьPOSTЗапрос(настройки, ЗапросКСервису)
    Соединение = Новый HTTPСоединение(СокрЛП(настройки.АдресСервера),настройки.ПортСервера,,,,?(настройки.Таймаут = 0, 20, настройки.Таймаут));
	
    Запрос = Новый HTTPЗапрос(настройки.Сервис);
    
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	Запрос.УстановитьТелоИзСтроки(ЗапросКСервису);	
	Ответ = Соединение.Post(Запрос);
	
	Если Ответ.КодСостояния <> 200 Тогда
		стрОтвет = Ответ.ПолучитьТелоКакСтроку();
		
		заголовки = "";
		Для Каждого элт Из Ответ.Заголовки Цикл
			заголовки = заголовки+элт.Ключ+":"+элт.Значение+";"+Символы.ПС;
		КонецЦикла;
		
		описание = "Ошибка отправки данных. Код ответа:"+Ответ.КодСостояния+" "+заголовки+" "+стрОтвет; 
		ЗаписьЖурналаРегистрации("_Elastic_", 
				УровеньЖурналаРегистрации.Ошибка, ,
				"Логи ЖР. Ошибка отправки ЖР", 
				описание
		);

		ВызватьИсключение описание;
    КонецЕсли;
	
	Возврат Ответ;
КонецФункции

#КонецОбласти

#Область ПодготовкаЗапроса

#Область ПреобразованиеЖРвJSON

Функция ПолучитьСоответствиеИменКолонокЖР()
	соотв = Новый Соответствие;
	соотв.Вставить("Уровень", 				"Level");
	соотв.Вставить("Дата", 					"Date");
	соотв.Вставить("Пользователь", 			"User");
	соотв.Вставить("Компьютер", 			"Computer");
	соотв.Вставить("ИмяПриложения", 		"ApplicationName");
	соотв.Вставить("Событие", 				"Event");
	соотв.Вставить("Комментарий", 			"Comment");
	соотв.Вставить("Метаданные", 			"Metadata");
	соотв.Вставить("Данные", 				"Data");
	соотв.Вставить("ПредставлениеДанных",	"DataPresentation");
	соотв.Вставить("ИмяПользователя", 		"UserName");
	соотв.Вставить("ПредставлениеПриложения","ApplicationPresentation");
	соотв.Вставить("ПредставлениеСобытия",	"EventPresentation");
	соотв.Вставить("ПредставлениеМетаданных","MetadataPresentation");
	соотв.Вставить("СтатусТранзакции", 		"TransactionStatus");
	соотв.Вставить("Транзакция", 			"TransactionID");
	соотв.Вставить("Сеанс", 				"Session");
	соотв.Вставить("Соединение", 			"Connection");
	соотв.Вставить("РабочийСервер", 		"ServerName");
	соотв.Вставить("ОсновнойIPПорт", 		"Port");
	соотв.Вставить("ВспомогательныйIPПорт", "SyncPort");

	Возврат соотв;
КонецФункции


Функция ПредставлениеЗначения(значение)
	представление = Неопределено;
	Попытка
		представление = XMLСтрока(значение);
	Исключение
		представление = XMLСтрока(""+значение);
	КонецПопытки;
	
	Возврат представление;
КонецФункции


Функция СформироватьЗначениеСвойства(данные)
	описание = "";
	Если ТипЗнч(данные) = Тип("Структура") Тогда
		Для Каждого элт Из данные Цикл
			описание = описание+элт.Ключ+":"+элт.Значение;
		КонецЦикла;
		описание = XMLСтрока(описание)
	Иначе
		описание = ПредставлениеЗначения(данные);
	КонецЕсли;
	
	Возврат описание;
КонецФункции

#КонецОбласти


Функция ВыбратьДанныеЖРЗаПериод(датаНачала, датаОкончания)
	Попытка
		фильтр = Новый Структура("ДатаНачала, ДатаОкончания", датаНачала, датаОкончания);
		табЗаписейЖР = Новый ТаблицаЗначений;
		ВыгрузитьЖурналРегистрации(табЗаписейЖР, фильтр);
		табЗаписейЖР.Сортировать("Дата");
		Возврат табЗаписейЖР;
	Исключение
		ошибка = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("_Elastic_", 
				УровеньЖурналаРегистрации.Ошибка, ,
				"Логи ЖР. Ошибка чтения ЖР", 
				СтрокаСоединенияИнформационнойБазы()+" период "+датаНачала+" "+датаОкончания
		);
		ВызватьИсключение ошибка;
	КонецПопытки;
КонецФункции


Функция ИнициироватьJSONЗапрос()
	JSONЗапрос = Новый ЗаписьJSON;
	JSONЗапрос.УстановитьСтроку();
	JSONЗапрос.ЗаписатьНачалоМассива();
	
	Возврат JSONЗапрос;
КонецФункции


Процедура ДобавитьСтрокуЖРвJSONЗапрос(JSONЗапрос, данные)
	соотвИменКолонок = ПолучитьСоответствиеИменКолонокЖР();
	
	колонки = данные.Владелец().Колонки;
	JSONЗапрос.ЗаписатьНачалоОбъекта();
	
	JSONЗапрос.ЗаписатьИмяСвойства("ConnectionString");
	JSONЗапрос.ЗаписатьЗначение(ВРег(СтрокаСоединенияИнформационнойБазы()));
	
	Для Каждого кол Из Колонки Цикл
		JSONЗапрос.ЗаписатьИмяСвойства(соотвИменКолонок.Получить(кол.Имя));	
		значениеСвойства = СформироватьЗначениеСвойства(данные[кол.Имя]);
		JSONЗапрос.ЗаписатьЗначение(значениеСвойства);
	КонецЦикла;
	JSONЗапрос.ЗаписатьКонецОбъекта();
КонецПроцедуры


Процедура ЗавершитьJSONЗапрос(JSONЗапрос)
	JSONЗапрос.ЗаписатьКонецМассива();
КонецПроцедуры


Функция ПолучитьСтрокуJSONЗапроса(JSONЗапрос)
	Возврат JSONЗапрос.Закрыть();
КонецФункции

#КонецОбласти

Функция ОтправитьЖРвLogstash() Экспорт
	настройки = ПолучитьНастройкиДоступаКElastic();
	
	//Тест соединения 	
	ответ = ОтправитьPOSTЗапрос(настройки, "");
	Если ответ.КодСостояния <> 200 Тогда
		ЗаписьЖурналаРегистрации("_Elastic_", 
					УровеньЖурналаРегистрации.Ошибка, ,
					"Логи ЖР. Не удалось установить соединение.", 
					СтрокаСоединенияИнформационнойБазы()
				);
		Возврат "Не удалось установить соединение.";
	КонецЕсли;	
	
	Попытка
		//ограничиваем период выгружаемых данных текущим моментом
		//это не строгое ограничени, т.к. реально выгрузка будет остановлена
		//когда начало выбираемого периода будет больше указанной даты,
		//а значит верхняя граница будет заведомо выше данного ограничения
		//это допустимо, т.к. именно реальная верхняя граница периода 
		//будет сохранена как начало периода отбора для следующего запуска 
		//выгрузки		
		датаВерхнейГраницыВыгрузки = ТекущаяДата();
		соотИменКолонок = ПолучитьСоответствиеИменКолонокЖР();
		период = ИнициироватьПериодВыгрузки(настройки.Период);
		
		Пока период.ДатаНачала <= датаВерхнейГраницыВыгрузки Цикл
			табЗаписейЖР = ВыбратьДанныеЖРЗаПериод(период.ДатаНачала, период.ДатаОкончания);
			Если табЗаписейЖР.Количество() = 0 Тогда
				СохранитьДатуНижнейГраницыВыгрузкиЖР(период.ДатаОкончания);
			Иначе
				ОтправитьДанныеЗаПериод(настройки, табЗаписейЖР);	
			КонецЕсли;
			период = ИнициироватьПериодВыгрузки(настройки.Период); 
		КонецЦикла;
	Исключение
		ошибка = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("_Elastic_", 
					УровеньЖурналаРегистрации.Ошибка, ,
					"Логи ЖР. Не удалось выгрузить данные ЖР.", 
					СтрокаСоединенияИнформационнойБазы()+" "+ошибка
		);
		ВызватьИсключение ошибка;
	КонецПопытки;
КонецФункции

Функция ОтправитьДанныеЗаПериод(настройки, табЗаписейЖР)
	Попытка
		Если табЗаписейЖР.Количество() > 0 Тогда
			JSONЗапрос = ИнициироватьJSONЗапрос();
			индекс = 0;
			Для Каждого стрЖР Из табЗаписейЖР Цикл
				//отправляем каждые 1000 записей в logstash		
				ДобавитьСтрокуЖРвJSONЗапрос(JSONЗапрос, стрЖР);
				индекс = табЗаписейЖР.Индекс(стрЖР);
				Если индекс > 0 И (индекс % 1000) = 0 Тогда		
					ЗавершитьJSONЗапрос(JSONЗапрос);
					стрЗапрос = ПолучитьСтрокуJSONЗапроса(JSONЗапрос);
					ОтправитьPOSTЗапрос(настройки, стрЗапрос);
					//смещаем дату кончания на 1 сек, для предотвращения дублирования 
					//выгружаемых записей
					СохранитьДатуНижнейГраницыВыгрузкиЖР(стрЖР.Дата+1);
					JSONЗапрос = ИнициироватьJSONЗапрос();
				КонецЕсли;
			КонецЦикла;
			
			ЗавершитьJSONЗапрос(JSONЗапрос);
			стрЗапрос = ПолучитьСтрокуJSONЗапроса(JSONЗапрос);
			Если ЗначениеЗаполнено(СтрЗаменить(стрЗапрос, "[]", "")) Тогда
				ОтправитьPOSTЗапрос(настройки, стрЗапрос);
				//смещаем дату кончания на 1 сек, для предотвращения дублирования 
				//выгружаемых записей
				СохранитьДатуНижнейГраницыВыгрузкиЖР(стрЖР.Дата+1);
			КонецЕсли;
			Если настройки.Дебаг Тогда 
				ЗаписьЖурналаРегистрации("_Elastic_", 
						УровеньЖурналаРегистрации.Информация, ,
						"Логи ЖР. Выгружено записей:"+индекс, 
						СтрокаСоединенияИнформационнойБазы()+" до "
						+стрЖР.Дата
				);
			КонецЕсли;			
		КонецЕсли;
	Исключение
		ошибка = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("_Elastic_", 
			УровеньЖурналаРегистрации.Ошибка, ,
			"Логи ЖР. Ошибка выгрузки:"+ошибка, 
			СтрокаСоединенияИнформационнойБазы()
		);
	КонецПопытки;
КонецФункции
